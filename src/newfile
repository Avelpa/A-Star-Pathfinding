start
end
LEFT_BOUNDARY
RIGHT_BOUNDARY
TOP_BOUNDARY
BOTTOM_BOUNDARY
NODES_LIST

public Enum State
{
    FREE,
    SOLID
}

class Node{

    H = heuristic
    F = MAX_VALUE; //or 0, whatever

    Node parent;

    setH(int newH)
    {
    }

    getF()
    {
        return F;
    }

    addToF(int increment)
    {
        F += increment;
    }
}

CREATE_NODES(); --> NODES_LIST

updateNodeHeuristics();
start.moveTo(getNextNode(start, end));

getNextNode(node, end){

    if (!withinBounds(node){
        return null;
    }
    //left
    LeftF = LeftNode.getF();
    //right
    RightF = RightNode.getF();
    //top
    TopF = TopNode.getF();
    //bottom
    BottomF = BottomNode.getF();

    

}

withinBounds(pos)
{
    return if in the boundary
}

updateNodeHeuristics()
{
    for (Node node: NODES_LIST)
    {
        if (node.state != State.SOLID)
        {
            node.setH(calculateH(node, end));
        }
    }
}

calculateH(node, end){
    super duper complicated mathematics
    return heuristic
}

getMax(Integer... ints)
{
    return max...
}